(set-logic ALL)
(declare-fun num_couriers () Int)
(assert (= num_couriers 2))
(declare-fun num_items () Int)
(assert (= num_items 3))
(declare-fun lower_bound () Int)
(assert (= lower_bound 160))
(declare-fun upper_bound () Int)
(assert (= upper_bound 271))
(declare-fun courier_1_capa () Int)
(assert (= courier_1_capa 18))
(declare-fun courier_2_capa () Int)
(assert (= courier_2_capa 30))
(declare-fun item_1_size () Int)
(assert (= item_1_size 20))
(declare-fun item_2_size () Int)
(assert (= item_2_size 17))
(declare-fun item_3_size () Int)
(assert (= item_3_size 6))
(declare-fun distances_1 () (Array Int Int))
(assert (= (select distances_1 1) 0))
(assert (= (select distances_1 2) 21))
(assert (= (select distances_1 3) 86))
(assert (= (select distances_1 4) 99))
(declare-fun distances_2 () (Array Int Int))
(assert (= (select distances_2 1) 21))
(assert (= (select distances_2 2) 0))
(assert (= (select distances_2 3) 71))
(assert (= (select distances_2 4) 80))
(declare-fun distances_3 () (Array Int Int))
(assert (= (select distances_3 1) 92))
(assert (= (select distances_3 2) 71))
(assert (= (select distances_3 3) 0))
(assert (= (select distances_3 4) 61))
(declare-fun distances_4 () (Array Int Int))
(assert (= (select distances_4 1) 59))
(assert (= (select distances_4 2) 80))
(assert (= (select distances_4 3) 61))
(assert (= (select distances_4 4) 0))
(declare-fun stop_1_1 () Int)
(assert (>= stop_1_1 1))
(assert (<= stop_1_1 3))
(declare-fun stop_1_2 () Int)
(assert (>= stop_1_2 1))
(assert (<= stop_1_2 4))
(declare-fun stop_1_3 () Int)
(assert (>= stop_1_3 1))
(assert (<= stop_1_3 4))
(declare-fun stop_2_1 () Int)
(assert (>= stop_2_1 1))
(assert (<= stop_2_1 3))
(declare-fun stop_2_2 () Int)
(assert (>= stop_2_2 1))
(assert (<= stop_2_2 4))
(declare-fun stop_2_3 () Int)
(assert (>= stop_2_3 1))
(assert (<= stop_2_3 4))
(declare-fun item_1_resp () Int)
(assert (>= item_1_resp 1))
(assert (<= item_1_resp 2))
(declare-fun item_2_resp () Int)
(assert (>= item_2_resp 1))
(assert (<= item_2_resp 2))
(declare-fun item_3_resp () Int)
(assert (>= item_3_resp 1))
(assert (<= item_3_resp 2))
(declare-fun distance_1_traveled () Int)
(assert (>= distance_1_traveled 0))
(assert (<= distance_1_traveled 271))
(declare-fun distance_2_traveled () Int)
(assert (>= distance_2_traveled 0))
(assert (<= distance_2_traveled 271))
(declare-fun load_1 () Int)
(assert (= load_1 (+(ite (= item_1_resp 1) item_1_size 0)(ite (= item_2_resp 1) item_2_size 0)(ite (= item_3_resp 1) item_3_size 0))))
(assert (>= courier_1_capa load_1))
(declare-fun load_2 () Int)
(assert (= load_2 (+(ite (= item_1_resp 2) item_1_size 0)(ite (= item_2_resp 2) item_2_size 0)(ite (= item_3_resp 2) item_3_size 0))))
(assert (>= courier_2_capa load_2))
(assert (or (= item_1_resp 1)(= item_2_resp 1)(= item_3_resp 1)))
(assert (or (= item_1_resp 2)(= item_2_resp 2)(= item_3_resp 2)))
(assert (=> (> courier_1_capa courier_2_capa) (> load_1 load_2)))
(assert (=> (> courier_2_capa courier_1_capa) (> load_2 load_1)))
(assert (let ((lhs (<= 1 (+ (ite (= item_1_resp 1) 1 0) (ite (= item_2_resp 1) 1 0) (ite (= item_3_resp 1) 1 0) )))
			 (rhs (< stop_1_1 4)))
			 (and (=> lhs rhs) (=> rhs lhs))))
(assert (let ((lhs (<= 2 (+ (ite (= item_1_resp 1) 1 0) (ite (= item_2_resp 1) 1 0) (ite (= item_3_resp 1) 1 0) )))
			 (rhs (< stop_1_2 4)))
			 (and (=> lhs rhs) (=> rhs lhs))))
(assert (let ((lhs (<= 3 (+ (ite (= item_1_resp 1) 1 0) (ite (= item_2_resp 1) 1 0) (ite (= item_3_resp 1) 1 0) )))
			 (rhs (< stop_1_3 4)))
			 (and (=> lhs rhs) (=> rhs lhs))))
(assert (let ((lhs (<= 1 (+ (ite (= item_1_resp 2) 1 0) (ite (= item_2_resp 2) 1 0) (ite (= item_3_resp 2) 1 0) )))
			 (rhs (< stop_2_1 4)))
			 (and (=> lhs rhs) (=> rhs lhs))))
(assert (let ((lhs (<= 2 (+ (ite (= item_1_resp 2) 1 0) (ite (= item_2_resp 2) 1 0) (ite (= item_3_resp 2) 1 0) )))
			 (rhs (< stop_2_2 4)))
			 (and (=> lhs rhs) (=> rhs lhs))))
(assert (let ((lhs (<= 3 (+ (ite (= item_1_resp 2) 1 0) (ite (= item_2_resp 2) 1 0) (ite (= item_3_resp 2) 1 0) )))
			 (rhs (< stop_2_3 4)))
			 (and (=> lhs rhs) (=> rhs lhs))))
(assert (=> (= item_1_resp 1) (or (= stop_1_1 1)(= stop_1_2 1)(= stop_1_3 1))))
(assert (=> (= item_2_resp 1) (or (= stop_1_1 2)(= stop_1_2 2)(= stop_1_3 2))))
(assert (=> (= item_3_resp 1) (or (= stop_1_1 3)(= stop_1_2 3)(= stop_1_3 3))))
(assert (=> (= item_1_resp 2) (or (= stop_2_1 1)(= stop_2_2 1)(= stop_2_3 1))))
(assert (=> (= item_2_resp 2) (or (= stop_2_1 2)(= stop_2_2 2)(= stop_2_3 2))))
(assert (=> (= item_3_resp 2) (or (= stop_2_1 3)(= stop_2_2 3)(= stop_2_3 3))))
(declare-const successors (Array Int Int))
(assert (=> (not (= stop_1_1 4)) (= (select successors stop_1_1) stop_1_2)))
(assert (=> (not (= stop_1_2 4)) (= (select successors stop_1_2) stop_1_3)))
(assert (=> (not (= stop_2_1 4)) (= (select successors stop_2_1) stop_2_2)))
(assert (=> (not (= stop_2_2 4)) (= (select successors stop_2_2) stop_2_3)))
(assert (= distance_1_traveled (+ (ite (= item_1_resp 1) (select distances_1 (select successors 1)) 0)(ite (= item_2_resp 1) (select distances_2 (select successors 2)) 0)(ite (= item_3_resp 1) (select distances_3 (select successors 3)) 0)(select distances_4 stop_1_1))))
(assert (= distance_2_traveled (+ (ite (= item_1_resp 2) (select distances_1 (select successors 1)) 0)(ite (= item_2_resp 2) (select distances_2 (select successors 2)) 0)(ite (= item_3_resp 2) (select distances_3 (select successors 3)) 0)(select distances_4 stop_2_1))))
(assert (<= distance_1_traveled 251))
(assert (<= distance_2_traveled 251))
(check-sat)
(get-model)
